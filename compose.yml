# =============================================================================
# SERVICES
# =============================================================================
services:
  # ---------------------------------------------------------------------------
  # DATABASE SERVICE
  # ---------------------------------------------------------------------------
  postgres:
    image: postgres:15
    container_name: smartrobe-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_EXTERNAL_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smartrobe-network

  # ---------------------------------------------------------------------------
  # ORCHESTRATOR SERVICE
  # ---------------------------------------------------------------------------
  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.orchestrator
    container_name: smartrobe-orchestrator
    environment:
      # Database Connection
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      
      # Service URLs (all model services use same default internal port)
      VISION_SERVICE_URL: http://vision-classifier:8000
      HEURISTIC_SERVICE_URL: http://heuristic-model:8000
      LLM_SERVICE_URL: http://llm-model:8000
      
      # Image Processing Configuration
      MAX_IMAGE_SIZE_MB: ${MAX_IMAGE_SIZE_MB}
      ALLOWED_IMAGE_FORMATS: ${ALLOWED_IMAGE_FORMATS}
      IMAGE_DOWNLOAD_TIMEOUT: ${IMAGE_DOWNLOAD_TIMEOUT}
      
      # API Configuration
      SERVICE_REQUEST_TIMEOUT: ${SERVICE_REQUEST_TIMEOUT}
      MAX_CONCURRENT_REQUESTS: ${MAX_CONCURRENT_REQUESTS}
      
      # Storage & Environment
      SHARED_STORAGE_PATH: ${SHARED_STORAGE_PATH}
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      DEBUG: ${DEBUG}
      ENVIRONMENT: ${ENVIRONMENT}
    ports:
      - "${ORCHESTRATOR_EXTERNAL_PORT}:8000"
    volumes:
      - shared_storage:${SHARED_STORAGE_PATH}
    depends_on:
      postgres:
        condition: service_healthy
      vision-classifier:
        condition: service_healthy
      heuristic-model:
        condition: service_healthy
      llm-model:
        condition: service_healthy
    networks:
      - smartrobe-network
    restart: unless-stopped

  # ---------------------------------------------------------------------------
  # MODEL SERVICES
  # ---------------------------------------------------------------------------
  vision-classifier:
    build:
      context: .
      dockerfile: Dockerfile.vision
    container_name: smartrobe-vision-classifier
    environment:
      # Only what this service actually needs
      SHARED_STORAGE_PATH: ${SHARED_STORAGE_PATH}
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      DEBUG: ${DEBUG}
      ENVIRONMENT: ${ENVIRONMENT}
    ports:
      - "${VISION_EXTERNAL_PORT}:8000"
    volumes:
      - shared_storage:${SHARED_STORAGE_PATH}
    networks:
      - smartrobe-network
    restart: unless-stopped

  heuristic-model:
    build:
      context: .
      dockerfile: Dockerfile.heuristic
    container_name: smartrobe-heuristic-model
    environment:
      # Only what this service actually needs
      SHARED_STORAGE_PATH: ${SHARED_STORAGE_PATH}
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      DEBUG: ${DEBUG}
      ENVIRONMENT: ${ENVIRONMENT}
    ports:
      - "${HEURISTIC_EXTERNAL_PORT}:8000"
    volumes:
      - shared_storage:${SHARED_STORAGE_PATH}
    networks:
      - smartrobe-network
    restart: unless-stopped

  llm-model:
    build:
      context: .
      dockerfile: Dockerfile.llm
    container_name: smartrobe-llm-model
    environment:
      # Only what this service actually needs
      SHARED_STORAGE_PATH: ${SHARED_STORAGE_PATH}
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      DEBUG: ${DEBUG}
      ENVIRONMENT: ${ENVIRONMENT}
    ports:
      - "${LLM_EXTERNAL_PORT}:8000"
    volumes:
      - shared_storage:${SHARED_STORAGE_PATH}
    networks:
      - smartrobe-network
    restart: unless-stopped

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  shared_storage:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  smartrobe-network:
    driver: bridge
